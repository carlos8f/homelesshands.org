? .cvsignore
? .project
? .settings
? install.log
? install_log.php
? test.php
? sites/default/files
? sites/default/private
? sites/default/settings.php
Index: modules/dashboard/dashboard.api.php
===================================================================
RCS file: /cvs/drupal/drupal/modules/dashboard/dashboard.api.php,v
retrieving revision 1.1
diff -u -p -r1.1 dashboard.api.php
--- modules/dashboard/dashboard.api.php	18 Oct 2009 11:20:26 -0000	1.1
+++ modules/dashboard/dashboard.api.php	3 Oct 2010 02:08:39 -0000
@@ -38,6 +38,15 @@ function hook_dashboard_regions_alter($r
   unset($regions['dashboard_sidebar']);
 }
 
+function hook_dashboard_blocks() {
+  return array(
+    'mymodule' => array(
+      'default_block_delta' => DASHBOARD_BLOCK_ENABLED,
+      'optional_block_delta' => DASHBOARD_BLOCK_AVAILABLE,
+    ),
+  );
+}
+
 /**
  * @} End of "addtogroup hooks".
  */
Index: modules/dashboard/dashboard.module
===================================================================
RCS file: /cvs/drupal/drupal/modules/dashboard/dashboard.module,v
retrieving revision 1.39
diff -u -p -r1.39 dashboard.module
--- modules/dashboard/dashboard.module	3 Oct 2010 00:14:57 -0000	1.39
+++ modules/dashboard/dashboard.module	3 Oct 2010 02:08:39 -0000
@@ -1,6 +1,10 @@
 <?php
 // $Id: dashboard.module,v 1.39 2010/10/03 00:14:57 dries Exp $
 
+define('DASHBOARD_BLOCK_DISABLED', 0x0000);
+define('DASHBOARD_BLOCK_AVAILABLE', 0x0001);
+define('DASHBOARD_BLOCK_ENABLED', 0x0002);
+
 /**
  * Implements hook_help().
  */
@@ -88,6 +92,28 @@ function dashboard_permission() {
   );
 }
 
+ /**
+ * Implements hook_block_info_alter().
+ */
+function dashboard_block_info_alter(&$blocks, $theme, $code_blocks) {
+  global $theme_key;
+  $dashboard_block_defaults = module_invoke_all('dashboard_blocks');
+
+  foreach ($blocks as $module => &$module_blocks) {
+    foreach ($module_blocks as $delta => &$block) {
+      if (isset($dashboard_block_defaults[$block['module']][$block['delta']])) {
+        $default = $dashboard_block_defaults[$block['module']][$block['delta']];
+        if (
+        continue;
+      }
+      if (empty($block['status']) && (empty($block['region']) || $block['region'] == BLOCK_REGION_NONE)) {
+        $block['status'] = 1;
+        $block['region'] = 'dashboard_main';
+      }
+    }
+  }
+}
+
 /**
  * Implements hook_block_list_alter().
  *
@@ -281,14 +307,16 @@ function dashboard_admin_blocks() {
   module_load_include('inc', 'block', 'block.admin');
 
   // Prepare the blocks for the current theme, and remove those that are
-  // currently displayed in non-dashboard regions.
+  // currently displayed in non-dashboard regions, or have the dashboard
+  // availability block setting disabled.
   // @todo This assumes the current page is being displayed using the same
   //   theme that the dashboard is displayed in.
   $blocks = block_admin_display_prepare_blocks($theme_key);
   $dashboard_regions = dashboard_region_descriptions();
   $regions_to_remove = array_diff_key(system_region_list($theme_key, REGIONS_VISIBLE), $dashboard_regions);
+  $available_blocks = variable_get('dashboard_available_blocks', array());
   foreach ($blocks as $id => $block) {
-    if (isset($regions_to_remove[$block['region']])) {
+    if (isset($regions_to_remove[$block['region']]) || empty($available_blocks[$block['module']][$block['delta']])) {
       unset($blocks[$id]);
     }
   }
@@ -344,6 +372,10 @@ function dashboard_form_dashboard_admin_
 function dashboard_form_block_admin_configure_alter(&$form, &$form_state) {
   global $theme_key;
   drupal_theme_initialize();
+  $block = block_load($form['module']['#value'], $form['delta']['#value']);
+  if (!isset($form['#block'])) {
+    $form['#block'] = $block;
+  }
   // Hide the dashboard regions from the region select list on the block
   // configuration form, for all themes except the current theme (since the
   // other themes do not display the dashboard).
@@ -356,6 +388,54 @@ function dashboard_form_block_admin_conf
       $region['#options'] = array_diff_key($region['#options'], $dashboard_regions);
     }
   }
+
+  // Provide a dashboard availability block setting.
+  $available_blocks = variable_get('dashboard_available_blocks', array());
+  $form['settings']['dashboard_visibility'] = array(
+    '#type' => 'select',
+    '#title' => t('Dashboard visibility'),
+    '#options' => array(
+      DASHBOARD_BLOCK_DISABLED => t('--Disabled--'),
+      DASHBOARD_BLOCK_AVAILABLE => t('Available'),
+      DASHBOARD_BLOCK_ENABLED => t('Enabled'),
+    ),
+    '#default_value' => !empty($available_blocks[$block->module][$block->delta]),
+  );
+  $form['#validate'][] = 'dashboard_form_block_admin_configure_validate';
+  $form['#submit'] = array_merge(array('dashboard_form_block_admin_configure_submit'), $form['#submit']);
+}
+
+/**
+ * Form validation handler for block configuration form.
+ */
+function dashboard_form_block_admin_configure_validate($form, &$form_state) {
+  global $theme_key;
+  drupal_theme_initialize();
+  $selected_region = $form_state['values']['regions'][$theme_key];
+  if ($form_state['values']['dashboard_visibility'] && $selected_region != BLOCK_REGION_NONE && !in_array($selected_region, dashboard_regions())) {
+    form_set_error('regions][' . $theme_key, t('To enable this block on the dashboard, you must first unassign the block from the @theme theme.', array('@theme' => $theme_key)));
+  }
+}
+
+/**
+ * Form submission handler for block configuration form.
+ */
+function dashboard_form_block_admin_configure_submit($form, &$form_state) {
+  global $theme_key;
+  drupal_theme_initialize();
+  // Save the dashboard availability setting.
+  $available_blocks = variable_get('dashboard_available_blocks', array());
+  if ($form_state['values']['dashboard_visibility']) {
+    $current_setting = isset($available_blocks[$form_state['values']['module']][$form_state['values']['delta']]) ? $available_blocks[$form_state['values']['module']][$form_state['values']['delta']] : DASHBOARD_BLOCK_DISABLED;
+    if ($current_setting != DASHBOARD_BLOCK_ENABLED && !$form['settings']['dashboard_visibility']['#default_value']) {
+      $form_state['values']['regions'][$theme_key] = 'dashboard_main';
+    }
+    $available_blocks[$form_state['values']['module']][$form_state['values']['delta']] = TRUE;
+  }
+  else {
+    unset($available_blocks[$form_state['values']['module']][$form_state['values']['delta']]);
+  }
+  variable_set('dashboard_available_blocks', $available_blocks);
 }
 
 /**
@@ -436,6 +516,27 @@ function dashboard_dashboard_regions() {
   );
 }
 
+function dashboard_block_settings() {
+  return array_merge_recursive(module_invoke_all('dashboard_blocks'), variable_get('dashboard_block_settings', array()));
+}
+
+function dashboard_block_list($status = DASHBOARD_BLOCK_AVAILABLE) {
+  global $theme_key;
+  drupal_theme_initialize();
+  // Blocks are not necessarily initialized at this point.
+  $blocks = _block_rehash();
+
+  // Limit the list to disabled blocks for the current theme, which have the
+  // dashboard availability block setting.
+
+  foreach ($blocks as $key => $block) {
+    if ($block['theme'] != $theme_key || (!empty($block['status']) && !empty($block['region'])) || empty($available_blocks[$block['module']][$block['delta']])) {
+      unset($blocks[$key]);
+    }
+  }
+  return $blocks;
+}
+
 /**
  * AJAX callback to show disabled blocks in the dashboard customization mode.
  */
@@ -445,9 +546,11 @@ function dashboard_show_disabled() {
   // Blocks are not necessarily initialized at this point.
   $blocks = _block_rehash();
 
-  // Limit the list to disabled blocks for the current theme.
+  // Limit the list to disabled blocks for the current theme, which have the
+  // dashboard availability block setting.
+  $available_blocks = variable_get('dashboard_available_blocks', array());
   foreach ($blocks as $key => $block) {
-    if ($block['theme'] != $theme_key || (!empty($block['status']) && !empty($block['region']))) {
+    if ($block['theme'] != $theme_key || (!empty($block['status']) && !empty($block['region'])) || empty($available_blocks[$block['module']][$block['delta']])) {
       unset($blocks[$key]);
     }
   }
Index: profiles/standard/standard.install
===================================================================
RCS file: /cvs/drupal/drupal/profiles/standard/standard.install,v
retrieving revision 1.25
diff -u -p -r1.25 standard.install
--- profiles/standard/standard.install	1 Oct 2010 01:37:13 -0000	1.25
+++ profiles/standard/standard.install	3 Oct 2010 02:08:40 -0000
@@ -202,6 +202,23 @@ function standard_install() {
   }
   $query->execute();
 
+  // Set dashboard availability for our initial blocks.
+  variable_set('dashboard_available_blocks', array(
+    'comment' => array(
+      'recent' => TRUE,
+    ),
+    'node' => array(
+      'recent' => TRUE,
+    ),
+    'user' => array(
+      'new' => TRUE,
+      'online' => TRUE,
+    ),
+    'search' => array(
+      'form' => TRUE,
+    )
+  ));
+
   // Insert default pre-defined node types into the database. For a complete
   // list of available node type attributes, refer to the node type API
   // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
