diff -u modules/dashboard/dashboard.css modules/dashboard/dashboard.css
--- modules/dashboard/dashboard.css	3 Nov 2010 17:38:54 -0000
+++ modules/dashboard/dashboard.css	4 Nov 2010 23:59:54 -0000
@@ -38,7 +38,7 @@
 }
 
 #dashboard .dashboard-add-other-blocks {
-  margin: 1em 0;
+  margin: 10px 0 0 0;
 }
 
 #dashboard .ui-sortable {
diff -u modules/dashboard/dashboard.module modules/dashboard/dashboard.module
--- modules/dashboard/dashboard.module	3 Nov 2010 17:38:54 -0000
+++ modules/dashboard/dashboard.module	4 Nov 2010 23:59:54 -0000
@@ -9,7 +9,7 @@
     case 'admin/help#dashboard':
       $output = '';
       $output .= '<h3>' . t('About') . '</h3>';
-      $output .= '<p>' . t('The Dashboard module provides a <a href="@dashboard">Dashboard page</a> in the administrative interface for organizing administrative tasks and navigation, and tracking information within your site. The Dashboard page contains blocks, which you can add to and arrange using the drag and drop interface that appears when you click on the <em>Customize dashboard</em> link. Within this interface, some blocks which are not primarily used for site administration do not appear by default, but can still be added to the dashboard via the <em>Add other blocks</em> link. For more information, see the online handbook entry for <a href="@handbook">Dashboard module</a>.', array('@handbook' => 'http://drupal.org/handbook/modules/dashboard', '@dashboard' => url('admin/dashboard'))) . '</p>';
+      $output .= '<p>' . t('The Dashboard module provides a <a href="@dashboard">Dashboard page</a> in the administrative interface for organizing administrative tasks and navigation, and tracking information within your site. The Dashboard page contains blocks, which you can add to and arrange using the drag-and-drop interface that appears when you click on the <em>Customize dashboard</em> link. Within this interface, blocks that are not primarily used for site administration do not appear by default, but can be added via the <em>Add other blocks</em> link. For more information, see the online handbook entry for <a href="@handbook">Dashboard module</a>.', array('@handbook' => 'http://drupal.org/handbook/modules/dashboard', '@dashboard' => url('admin/dashboard'))) . '</p>';
       $output .= '<h3>' . t('Uses') . '</h3>';
       $output .= '<dl>';
       $output .= '<dt>' . t('Tracking user activity') . '</dt>';
@@ -22,7 +22,7 @@
     case 'admin/dashboard/configure':
       // @todo This assumes the current page is being displayed using the same
       //   theme that the dashboard is displayed in.
-      $output = '<p>' . t('Rearrange blocks for display on the <a href="@dashboard-url">dashboard</a>. Removing a block from the dashboard makes it available on the main <a href="@blocks-url">blocks administration page</a>.', array('@dashboard-url' => url('admin/dashboard'), '@blocks-url' => url("admin/structure/block/list/{$GLOBALS['theme_key']}"))) . '</p>';
+      $output = '<p>' . t('Rearrange blocks for display on the <a href="@dashboard-url">Dashboard page</a>. Blocks placed in the <em>Dashboard (inactive)</em> region are not displayed when viewing the Dashboard page, but are available within its <em>Customize dashboard</em> interface. Removing a block from active dashboard display makes it available on the main <a href="@blocks-url">blocks administration page</a>.', array('@dashboard-url' => url('admin/dashboard'), '@blocks-url' => url("admin/structure/block/list/{$GLOBALS['theme_key']}"))) . '</p>';
       return $output;
   }
 }
@@ -101,7 +101,7 @@
         // available for the dashboard.
         if (empty($block['status']) && (empty($block['region']) || $block['region'] == BLOCK_REGION_NONE) && !empty($code_blocks[$module][$delta]['properties']['administrative'])) {
           $block['status'] = 1;
-          $block['region'] = 'dashboard_hidden';
+          $block['region'] = 'dashboard_inactive';
         }
       }
     }
@@ -141,7 +141,7 @@
     $page['content']['dashboard'] = array('#theme_wrappers' => array('dashboard'));
     foreach (dashboard_regions() as $region) {
       // Do not show dashboard blocks that are disabled.
-      if ($region == 'dashboard_hidden') {
+      if ($region == 'dashboard_inactive') {
         continue;
       }
       // Insert regions even when they are empty, so that they will be
@@ -200,13 +200,13 @@
  */
 function dashboard_system_info_alter(&$info, $file, $type) {
   if ($type == 'theme') {
-    // Add the dashboard regions (the "hidden" region should always appear last
-    // in the list, for usability reasons).
+    // Add the dashboard regions (the "inactive" region should always appear
+    // last in the list, for usability reasons).
     $dashboard_regions = dashboard_region_descriptions();
-    if (isset($dashboard_regions['dashboard_hidden'])) {
-      $hidden_region = $dashboard_regions['dashboard_hidden'];
-      unset($dashboard_regions['dashboard_hidden']);
-      $dashboard_regions['dashboard_hidden'] = $hidden_region;
+    if (isset($dashboard_regions['dashboard_inactive'])) {
+      $inactive_region = $dashboard_regions['dashboard_inactive'];
+      unset($dashboard_regions['dashboard_inactive']);
+      $dashboard_regions['dashboard_inactive'] = $inactive_region;
     }
     $info['regions'] += $dashboard_regions;
     // Indicate that these regions are intended to be displayed whenever the
@@ -343,20 +343,20 @@
     $form['block_regions']['#value'] = array_diff_key($form['block_regions']['#value'], $dashboard_regions);
     foreach (element_children($form['blocks']) as $i) {
       $block = &$form['blocks'][$i];
-      if (isset($block['region']['#default_value']) && isset($dashboard_regions[$block['region']['#default_value']]) && $block['region']['#default_value'] != 'dashboard_hidden') {
+      if (isset($block['region']['#default_value']) && isset($dashboard_regions[$block['region']['#default_value']]) && $block['region']['#default_value'] != 'dashboard_inactive') {
         $block['#access'] = FALSE;
       }
       elseif (isset($block['region']['#options'])) {
         $block['region']['#options'] = array_diff_key($block['region']['#options'], $dashboard_regions);
       }
-      // Show hidden dashboard blocks as disabled on the main block
+      // Show inactive dashboard blocks as disabled on the main block
       // administration form, so that they are available to place in other
       // regions of the theme. Note that when the form is submitted, any such
       // blocks which still remain disabled will immediately be put back in the
-      // 'dashboard_hidden' region, because dashboard_block_info_alter() is
+      // 'dashboard_inactive' region, because dashboard_block_info_alter() is
       // called when the blocks are rehashed. Fortunately, this is the exact
       // behavior we want.
-      if ($block['region']['#default_value'] == 'dashboard_hidden') {
+      if ($block['region']['#default_value'] == 'dashboard_inactive') {
         // @todo These do not wind up in correct alphabetical order.
         $block['region']['#default_value'] = NULL;
       }
@@ -413,7 +413,7 @@
 function template_preprocess_dashboard_admin_display_form(&$variables) {
   template_preprocess_block_admin_display_form($variables);
   if (isset($variables['block_regions'][BLOCK_REGION_NONE])) {
-    $variables['block_regions'][BLOCK_REGION_NONE] = t('Other available blocks');
+    $variables['block_regions'][BLOCK_REGION_NONE] = t('Other blocks');
   }
 }
 
@@ -478,7 +478,7 @@
   return array(
     'dashboard_main' => 'Dashboard (main)',
     'dashboard_sidebar' => 'Dashboard (sidebar)',
-    'dashboard_hidden' => 'Dashboard (hidden)',
+    'dashboard_inactive' => 'Dashboard (inactive)',
   );
 }
 
@@ -493,7 +493,7 @@
 
   // Limit the list to blocks that are marked as disabled for the dashboard.
   foreach ($blocks as $key => $block) {
-    if ($block['theme'] != $theme_key || $block['region'] != 'dashboard_hidden') {
+    if ($block['theme'] != $theme_key || $block['region'] != 'dashboard_inactive') {
       unset($blocks[$key]);
     }
   }
@@ -542,7 +542,7 @@
     parse_str($_REQUEST['regions'], $regions);
     foreach ($regions as $region_name => $blocks) {
       if ($region_name == 'disabled_blocks') {
-        $region_name = 'dashboard_hidden';
+        $region_name = 'dashboard_inactive';
       }
       foreach ($blocks as $weight => $block_string) {
         // Parse the query string to determine the block's module and delta.
diff -u modules/dashboard/dashboard.test modules/dashboard/dashboard.test
--- modules/dashboard/dashboard.test	3 Nov 2010 17:38:54 -0000
+++ modules/dashboard/dashboard.test	4 Nov 2010 23:59:54 -0000
@@ -127,7 +127,7 @@
     $this->assertNoText(t('Syndicate'), t('Drawer of disabled blocks excludes a block not defined as "administrative".'));
     $this->drupalGet('admin/dashboard/configure');
     $elements = $this->xpath('//select[@id=:id]//option[@selected="selected"]', array(':id' => 'edit-blocks-comment-recent-region'));
-    $this->assertTrue($elements[0]['value'] == 'dashboard_hidden', t('A block defined as "administrative" defaults to dashboard_hidden.'));
+    $this->assertTrue($elements[0]['value'] == 'dashboard_inactive', t('A block defined as "administrative" defaults to dashboard_inactive.'));
 
     // Now enable the block on the dashboard.
     $values = array();
