Index: includes/password.inc
===================================================================
RCS file: /cvs/drupal/drupal/includes/password.inc,v
retrieving revision 1.8
diff -u -p -r1.8 password.inc
--- includes/password.inc	4 May 2010 15:47:03 -0000	1.8
+++ includes/password.inc	8 Dec 2010 03:36:36 -0000
@@ -99,12 +99,17 @@ function _password_base64_encode($input,
  */
 function _password_generate_salt($count_log2) {
   $output = '$S$';
-  // Minimum log2 iterations is DRUPAL_MIN_HASH_COUNT.
-  $count_log2 = max($count_log2, DRUPAL_MIN_HASH_COUNT);
-  // Maximum log2 iterations is DRUPAL_MAX_HASH_COUNT.
+  // Ensure that $count_log2 is within set bounds.
+  if ($count_log2 < DRUPAL_MIN_HASH_COUNT) {
+    $count_log2 = DRUPAL_MIN_HASH_COUNT;
+  }
+  elseif ($count_log2 > DRUPAL_MAX_HASH_COUNT) {
+    $count_log2 = DRUPAL_MAX_HASH_COUNT;
+  }
+
   // We encode the final log2 iteration count in base 64.
   $itoa64 = _password_itoa64();
-  $output .= $itoa64[min($count_log2, DRUPAL_MAX_HASH_COUNT)];
+  $output .= $itoa64[$count_log2];
   // 6 bytes is the standard salt for a portable phpass hash.
   $output .= _password_base64_encode(drupal_random_bytes(6), 6);
   return $output;
@@ -261,7 +266,15 @@ function user_needs_new_hash($account) {
   if ((substr($account->pass, 0, 3) != '$S$') || (strlen($account->pass) != DRUPAL_HASH_LENGTH)) {
     return TRUE;
   }
+  $count_log2 = (int) variable_get('password_count_log2', DRUPAL_HASH_COUNT);
+  // Ensure that $count_log2 is within set bounds.
+  if ($count_log2 < DRUPAL_MIN_HASH_COUNT) {
+    $count_log2 = DRUPAL_MIN_HASH_COUNT;
+  }
+  elseif ($count_log2 > DRUPAL_MAX_HASH_COUNT) {
+    $count_log2 = DRUPAL_MAX_HASH_COUNT;
+  }
   // Check whether the iteration count used differs from the standard number.
-  return (_password_get_count_log2($account->pass) != variable_get('password_count_log2', DRUPAL_HASH_COUNT));
+  return (_password_get_count_log2($account->pass) !== $count_log2);
 }
 
