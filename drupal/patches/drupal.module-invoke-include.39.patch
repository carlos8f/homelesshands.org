Index: includes/module.inc
===================================================================
RCS file: /cvs/drupal/drupal/includes/module.inc,v
retrieving revision 1.206
diff -u -p -r1.206 module.inc
--- includes/module.inc	21 Nov 2010 10:19:48 -0000	1.206
+++ includes/module.inc	23 Nov 2010 20:43:20 -0000
@@ -591,7 +591,20 @@ function module_disable($module_list, $d
  *   implemented in that module.
  */
 function module_hook($module, $hook) {
-  return function_exists($module . '_' . $hook);
+  $function = $module . '_' . $hook;
+  if (function_exists($function)) {
+    return TRUE;
+  }
+  // If the hook implementation does not exist, check whether it may live in an
+  // optional include file registered via hook_hook_info().
+  $hook_info = module_hook_info();
+  if (isset($hook_info[$hook]['group'])) {
+    module_load_include('inc', $module, $module . '.' . $hook_info[$hook]['group']);
+    if (function_exists($function)) {
+      return TRUE;
+    }
+  }
+  return FALSE;
 }
 
 /**
@@ -695,10 +708,15 @@ function module_implements($hook, $sort 
  * Retrieve a list of what hooks are explicitly declared.
  */
 function module_hook_info() {
-  $hook_info = &drupal_static(__FUNCTION__, array());
-
-  if (empty($hook_info)) {
-    $cache = cache_get('hook_info', 'cache_bootstrap');
+  // This function is indirectly invoked from bootstrap_invoke_all(). Therefore,
+  // caches have to be specific to the current bootstrap phase, or otherwise the
+  // cache would be primed with hooks of bootstrap modules only.
+  $cid = __FUNCTION__ . ':' . drupal_bootstrap(NULL, FALSE);
+  $hook_info = &drupal_static($cid);
+
+  if (!isset($hook_info)) {
+    $hook_info = array();
+    $cache = cache_get($cid, 'cache_bootstrap');
     if ($cache === FALSE) {
       // Rebuild the cache and save it.
       // We can't use module_invoke_all() here or it would cause an infinite
@@ -719,7 +737,7 @@ function module_hook_info() {
           $function($hook_info);
         }
       }
-      cache_set('hook_info', $hook_info, 'cache_bootstrap');
+      cache_set($cid, $hook_info, 'cache_bootstrap');
     }
     else {
       $hook_info = $cache->data;
@@ -767,6 +785,7 @@ function module_invoke() {
     return call_user_func_array($module . '_' . $hook, $args);
   }
 }
+
 /**
  * Invoke a hook in all enabled modules that implement it.
  *
Index: modules/simpletest/tests/module.test
===================================================================
RCS file: /cvs/drupal/drupal/modules/simpletest/tests/module.test,v
retrieving revision 1.24
diff -u -p -r1.24 module.test
--- modules/simpletest/tests/module.test	20 Nov 2010 03:34:30 -0000	1.24
+++ modules/simpletest/tests/module.test	23 Nov 2010 20:43:20 -0000
@@ -112,6 +112,36 @@ class ModuleUnitTest extends DrupalWebTe
   }
 
   /**
+   * Test that module_implements() references hook_hook_info() without loading.
+   */
+  function testModuleImplementsLazyLoading() {
+    module_enable(array('module_test'), FALSE);
+    $this->resetAll();
+    $this->assertTrue(module_implements('test_hook'), t('module_implements() reports that the hook is implemented.'));
+    $this->assertFalse(function_exists('module_test_test_hook'), t('Hook is not loaded if not invoked.'));
+  }
+
+  /**
+   * Test that module_invoke() can load a hook defined in hook_hook_info().
+   */
+  function testModuleInvokeDynamicLoading() {
+    module_enable(array('module_test'), FALSE);
+    $this->resetAll();
+    $this->drupalGet('module-test/hook-dynamic-loading-invoke');
+    $this->assertText('success!', t('module_invoke() dynamically loads a hook defined in hook_hook_info().'));
+  }
+
+  /**
+   * Test that module_invoke_all() can load a hook defined in hook_hook_info().
+   */
+  function testModuleInvokeAllDynamicLoading() {
+    module_enable(array('module_test'), FALSE);
+    $this->resetAll();
+    $this->drupalGet('module-test/hook-dynamic-loading-invoke-all');
+    $this->assertText('success!', t('module_invoke_all() dynamically loads a hook defined in hook_hook_info().'));
+  }
+
+  /**
    * Test dependency resolution.
    */
   function testDependencyResolution() {
Index: modules/simpletest/tests/module_test.file.inc
===================================================================
RCS file: /cvs/drupal/drupal/modules/simpletest/tests/module_test.file.inc,v
retrieving revision 1.2
diff -u -p -r1.2 module_test.file.inc
--- modules/simpletest/tests/module_test.file.inc	26 May 2010 19:51:01 -0000	1.2
+++ modules/simpletest/tests/module_test.file.inc	23 Nov 2010 20:43:20 -0000
@@ -10,5 +10,5 @@
  * Implements hook_test_hook().
  */
 function module_test_test_hook() {
-
+  return array('module_test' => 'success!');
 }
Index: modules/simpletest/tests/module_test.module
===================================================================
RCS file: /cvs/drupal/drupal/modules/simpletest/tests/module_test.module,v
retrieving revision 1.9
diff -u -p -r1.9 module_test.module
--- modules/simpletest/tests/module_test.module	20 Nov 2010 03:34:30 -0000	1.9
+++ modules/simpletest/tests/module_test.module	23 Nov 2010 20:43:20 -0000
@@ -52,6 +52,45 @@ function module_test_hook_info() {
 }
 
 /**
+ * Implements hook_menu().
+ */
+function module_test_menu() {
+  $items['module-test/hook-dynamic-loading-invoke'] = array(
+    'title' => 'Test hook dynamic loading (invoke)',
+    'page callback' => 'module_test_hook_dynamic_loading_invoke',
+    'access arguments' => array('access content'),
+  );
+  $items['module-test/hook-dynamic-loading-invoke-all'] = array(
+    'title' => 'Test hook dynamic loading (invoke_all)',
+    'page callback' => 'module_test_hook_dynamic_loading_invoke_all',
+    'access arguments' => array('access content'),
+  );
+  return $items;
+}
+
+/**
+ * Page callback for 'hook dynamic loading' test.
+ *
+ * If the hook is dynamically loaded correctly, the menu callback should
+ * return 'success!'.
+ */
+function module_test_hook_dynamic_loading_invoke() {
+  $result = module_invoke('module_test', 'test_hook');
+  return $result['module_test'];
+}
+
+/**
+ * Page callback for 'hook dynamic loading' test.
+ *
+ * If the hook is dynamically loaded correctly, the menu callback should
+ * return 'success!'.
+ */
+function module_test_hook_dynamic_loading_invoke_all() {
+  $result = module_invoke_all('test_hook');
+  return $result['module_test'];
+}
+
+/**
  * Implements hook_modules_enabled().
  */
 function module_test_modules_enabled($modules) {
