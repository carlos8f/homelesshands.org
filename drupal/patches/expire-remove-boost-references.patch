? .project
Index: expire.module
===================================================================
RCS file: /cvs/drupal-contrib/contributions/modules/expire/expire.module,v
retrieving revision 1.2
diff -u -p -r1.2 expire.module
--- expire.module	26 Feb 2010 17:21:05 -0000	1.2
+++ expire.module	25 May 2010 23:46:57 -0000
@@ -6,9 +6,10 @@
  * Provides logic for page cache expiration
  */
 
-define('EXPIRE_FLUSH_NODE_TERMS', TRUE);
-define('EXPIRE_FLUSH_MENU_ITEMS', 1);
-define('EXPIRE_FLUSH_CCK_REFERENCES', TRUE);
+define('EXPIRE_ENABLED', variable_get('expire_enabled', TRUE));
+define('EXPIRE_FLUSH_NODE_TERMS', variable_get('expire_flush_node_terms', TRUE));
+define('EXPIRE_FLUSH_MENU_ITEMS', variable_get('expire_flush_menu_items', 1));
+define('EXPIRE_FLUSH_CCK_REFERENCES', variable_get('expire_flush_cck_references', TRUE));
 
 
 /**
@@ -63,7 +64,7 @@ function expire_nodeapi(&$node, $op, $te
  *  array of votes
  */
 function expire_votingapi_insert($votes) {
-  if (!BOOST_ENABLED) return;
+  if (!EXPIRE_ENABLED) return;
 
   foreach ($votes as $vote) {
     $node = node_load($vote['content_id']);
@@ -79,12 +80,12 @@ function expire_votingapi_insert($votes)
  *  array of votes
  */
 function expire_votingapi_delete($votes) {
-  if (!BOOST_ENABLED) return;
+  if (!EXPIRE_ENABLED) return;
 
   foreach ($votes as $vote) {
     $node = node_load($vote['content_id']);
     $node->nid = $vote['content_id'];
-    boost_expire_node($node);
+    expire_node($node);
   }
 }
 
@@ -100,7 +101,7 @@ function expire_user($op, &$edit, &$acco
       if (!empty($account->uid)) {
         $paths[] = 'user/' . $account->uid;
         $flushed = expire_cache_derivative($paths, TRUE, TRUE);
-        watchdog('boost', 'expire_user() <br />User !uid was deleted resulting in !flushed pages being expired from the cache',  array('!uid' => $account->uid, '!flushed' => $flushed));
+        watchdog('expire', 'expire_user() <br />User !uid was deleted resulting in !flushed pages being expired from the cache',  array('!uid' => $account->uid, '!flushed' => $flushed));
       }
       break;
   }
@@ -135,7 +136,7 @@ function expire_node($node) {
 
   // Get taxonomy terms and flush
   if (module_exists('taxonomy') && EXPIRE_FLUSH_NODE_TERMS) {
-    $tids = boost_taxonomy_node_get_tids($node->nid);
+    $tids = expire_taxonomy_node_get_tids($node->nid);
     $filenames = array();
     foreach ($tids as $tid) {
       if (is_int($tid)) {
@@ -258,7 +259,7 @@ function expire_get_menu_structure($menu
   }
 
   // Clean up
-  if (is_array($structure)) {
+  if (isset($structure) && is_array($structure)) {
     $structure = array_unique($structure);
   }
   $found_global = $found;
@@ -316,10 +317,7 @@ function expire_cache_derivative($paths,
 
     // Path alias
     $path_alias = url($path, array('absolute' => FALSE));
-    if ($base_path != '/') {
-      $path_alias = implode('/', array_diff_assoc(array_filter(explode('/', $path_alias)), array_filter(explode('/', $base_path))));
-    }
-    $expire[] = $path_alias;
+    $expire[] = preg_replace('~^'. $base_path .'~', '', $path_alias);
 
     // Path redirects
     if (module_exists('path_redirect')) {
