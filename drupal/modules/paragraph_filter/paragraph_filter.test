<?php
// $Id$

/**
 * Unit tests for paragraph filter.
 */
class ParagraphFilterUnitTestCase extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Paragraph filter',
      'description' => 'Tests paragraph filter.',
      'group' => 'Filter',
    );
  }

  function setUp() {
    parent::setUp(array('paragraph_filter'));
  }

  /**
   * Test the line break filter.
   */
  function testParagraphFilter() {
    // Very long string hitting PCRE limits.
    $limit = max(ini_get('pcre.backtrack_limit'), ini_get('pcre.recursion_limit'));
    $source = $this->randomName($limit);
    $result = _paragraph_filter_process($source);
    $this->assertIdenticalWithoutWhitespace('<p>'. $source .'</p>', $result, t('Line break filter can process very long strings.'));

    // Tests that the filter outputs valid XHTML. If the output is valid, it
    // will not need to be corrected.
    $tests = array();
    $test1 = "<div>\nParagraph text\n\nMore text\n</div>";
    $this->assertCorrectHTML($test1);
    $this->assertCorrectHTML(_paragraph_filter_process($test1));

    $test2 = <<<EOT
<img src="/logo.png" />

<big class="fat">The quick brown fox <em>jumps over the lazy dog.

The lazy dog</em> jumps over the quick brown </big>fox.

<div id="some-id">
  Quick lazy fox,

  Jumps <span style="color:blue">over a lazy</span> fish.
</div>
The end.
EOT;
    $this->assertCorrectHTML($test2);
    $this->assertCorrectHTML(_paragraph_filter_process($test2));

    // test3 is identical to test2, just with a <pre> tag inserted.
    $test3 = <<<EOT
<img src="/logo.png" />

<pre>
This is a pre tag!
</pre>

<big class="fat">The quick brown fox <em>jumps over the lazy dog.

The lazy dog</em> jumps over the quick brown </big>fox.

<div id="some-id">
  Quick lazy fox,

  Jumps <span style="color:blue">over a lazy</span> fish.
</div>
The end.
EOT;
    $this->assertCorrectHTML($test3);
    $this->assertCorrectHTML(_paragraph_filter_process($test3));
  }

  /**
   * Asserts that a string consists of valid HTML.
   *
   * If $source is valid HTML, _filter_htmlcorrector() will return the same
   * $source without modification.
   *
   * @param $source
   *   String of HTML to test.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   *
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  function assertCorrectHTML($source, $message = '', $group = 'Other') {
    $corrected = _filter_htmlcorrector($source);

    if (empty($message)) {
      $message = t('@source: Consists of valid HTML.', array('@source' => var_export($source, TRUE)));
    }
    $success = $this->assertIdenticalWithoutWhitespace($source, $corrected, $message, $group);

    return $success;
  }

  /**
   * Assert that aside from whitespace differences, the two strings are equal.
   *
   * @param $first
   *   The first value to check.
   * @param $second
   *   The second value to check.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   *
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  function assertIdenticalWithoutWhitespace($first, $second, $message = '', $group = 'Other') {
    $first = preg_replace('~\s~', '', $first);
    $second = preg_replace('~\s~', '', $second);

    return $this->assertIdentical($first, $second, $message, $group);
  }
}
